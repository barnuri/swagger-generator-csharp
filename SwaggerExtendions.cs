using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting.Server.Features;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.StaticFiles;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using NSwag;
using NSwag.AspNetCore;
using NSwag.Generation.AspNetCore;
using System;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

public static class SwaggerExtendions
{
    //generating swagger and configuring settings
    public static void AddAutoGeneratedSwagger(this IServiceCollection services, Action<AspNetCoreOpenApiDocumentGeneratorSettings>? configure = null)
    {
        try
        {
            services.AddOpenApiDocument(c =>
            {
                c.Version = "";
                c.Title = $"Swagger";
                c.Description = "";
                c.DocumentProcessors.Add(new SwaggerFieldsDP());
                c.SchemaProcessors.Add(new SwaggerKnownTypesSP());
                c.DocumentProcessors.Add(new SwaggerExtendDP());
                c.OperationProcessors.Add(new SwaggerRequestExamplesOP());
                c.OperationProcessors.Add(new SwaggerResponseExamplesOP());
                c.OperationProcessors.Add(new SwaggerFromQueryOP());
                c.GenerateCustomNullableProperties = true;
                c.GenerateKnownTypes = false;
                c.GenerateAbstractSchemas = true;
                c.SerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
                c.SerializerSettings.Converters.Add(new StringEnumConverter());
                configure ??= c => { };
                configure(c);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Cant Run Swagger - AddAutoGeneratedSwagger - {ex}");
        }
    }

    //generating swagger and configuring settings
    public static void UseAutoGeneratedSwagger(this IApplicationBuilder app, Action<OpenApiDocumentMiddlewareSettings>? openApiConfigure = null, Action<SwaggerUi3Settings>? useSwaggerUi3Configure = null, bool fixCnameProblems = true, bool addRedirectToSwagger = true, bool swaggerUiUpdatedFiles = true, string swaggerPrefix = "/api/swagger")
    {
        try
        {
            app.Use(async (ctx, next) =>
            {
                Func<string, Task> getFileAndResponse = async (string filePath) =>
                {
                    HttpClientHandler clientHandler = new HttpClientHandler();
                    clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true;
                    var httpClient = new HttpClient(clientHandler);
                    var res = await httpClient.GetAsync(filePath);
                    new FileExtensionContentTypeProvider().TryGetContentType(filePath, out var contentType);
                    ctx.Response.Headers["Content-Type"] = contentType;
                    await ctx.Response.WriteAsync(await res.Content.ReadAsStringAsync());
                };
                try
                {
                    var path = ctx.Request.Path.Value;
                    if (addRedirectToSwagger)
                    {
                        // redirect Default Route To SwaggerUI
                        if (string.IsNullOrEmpty(path.TrimEnd('/')) || path.TrimEnd('/') == "/api" || path.TrimEnd('/') == swaggerPrefix.TrimEnd('/'))
                        {
                            ctx.Response.Redirect($"{swaggerPrefix}/index.html?url=./swagger.json");
                            return;
                        }
                        await next.Invoke();
                    }
                    if (fixCnameProblems && path == "/swagger.json")
                    {
                        await getFileAndResponse("http://localhost:5000/api/swagger/swagger.json");
                        return;
                    }
                    else if (swaggerUiUpdatedFiles && path!.StartsWith("/api/swagger") && !path.EndsWith("swagger.json"))
                    {
                        var filePath = "https://raw.githubusercontent.com/swagger-api/swagger-ui/master/dist/" + ctx.Request.Path.Value!.Split('/').Last();
                        await getFileAndResponse(filePath);
                        return;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"UseAutoGeneratedSwagger Error - {ex}");
                }
                await next.Invoke();
            });
            app.UseOpenApi(c =>
            {
                c.Path = $"{swaggerPrefix}/swagger.json";
                c.PostProcess = (document, request) =>
                {
                    document.Servers.Clear();
                    try
                    {
                        var url = request.GetTypedHeaders().Referer.AbsoluteUri;
                        document.Servers.Add(new OpenApiServer { Url = new Regex("/api").Split(url).ToList().FirstOrDefault() });
                        document.Servers.Add(new OpenApiServer { Url = url });
                    }
                    catch { }
                    document.Servers.Add(new OpenApiServer { Url = "/" });
                    try
                    {
                        document.Servers.Add(new OpenApiServer { Url = request.GetTypedHeaders().Host.Value });
                    }
                    catch { }
                    document.Servers.Add(new OpenApiServer { Url = request.PathBase });
                };
                openApiConfigure ??= c => { };
                openApiConfigure(c);
            });

            app.UseSwaggerUi3(c =>
            {
                c.DocExpansion = "list";
                c.DocumentPath = "./swagger.json"; //fix relative paths
                c.Path = swaggerPrefix;
                useSwaggerUi3Configure ??= c => { };
                useSwaggerUi3Configure(c);
            });

            var addresses = app.ServerFeatures.Get<IServerAddressesFeature>()!.Addresses.OrderBy(x => x.StartsWith("https:") ? 0 : 1);
            var info = string.Join("\n\n", addresses.Select(x => x.TrimEnd('/')).Select(x => $"\t{x}\n\t{x}{swaggerPrefix}/index.html?url=./swagger.json").ToList() ?? new());
            Console.WriteLine($@"

{"################ Server Is Running ##################"}
    {"Addresses"}
{info}
{"#####################################################"}

");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Cant Run Swagger - UseAutoGeneratedSwagger - {ex}");
        }
    }
}